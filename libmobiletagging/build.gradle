apply plugin: 'com.android.library'

version = "3.0.0"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 3
        versionName "3.0"
        testApplicationId 'se.kantarsifo.mobileanalytics.framework.instrumenttest'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile ("org.robolectric:robolectric:3.0-rc3")
    testCompile ("org.mockito:mockito-core:1.10.19")
    testCompile ("com.squareup.assertj:assertj-android:1.0.0") {
        exclude group: 'com.android.support', module:'support-annotations'
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile ("org.mockito:mockito-core:1.10.19")
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
    testCompile 'junit:junit:4.12'
    compile 'com.android.volley:volley:1.0.0'

}

def filename = 'libMobileTagging.jar'
def output = "build/TNS-Sifo-MobileMeasureFramework-Android.${version}/"

task javadoc(type: Javadoc) {
    logger.lifecycle("javadoc ********")

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(project.android.getBootClasspath())
    destinationDir = file("${output}javadoc/")
    //Suppress warnings that can cause fail build on continuous integration tools
    logger.lifecycle("javadoc created ********" + destinationDir)
    failOnError false
}

task clearJar(type: Delete) {
    logger.lifecycle("deleting a jar *********************")
    delete 'libs/libMobileTagging.jar'
}

task makeJar(type: Copy) {
    from 'build/intermediates/bundles/debug/'
    into "libs/"
    include('classes.jar')
    rename('classes.jar', "$filename")
}

//Dependent tasks will be executed first before executing requested task
makeJar.dependsOn(javadoc, clearJar, ':app:packageReleaseJar')