apply plugin: 'com.android.application'

version = "3.0.0"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "se.kantarsifo.mobileanalytics.sampleapp"
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 2
        versionName "3.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('debug.apk')) {
                def fileName = "kantar.sifo.mobile.analytics.sample-${version}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
    compile project(':libmobiletagging')
    compile 'com.squareup.picasso:picasso:2.5.2'
}

task copyAARToReleaseFolder() << {

    // set project version
    project.configure(project){ println  "version !!!!????? : "  + version}

    def path = project.rootDir.path + "/Kantar-Sifo-Mobile-Analytics-Android-SDK-${version}"
    def apkPath = project.rootDir.path + '/app/build/outputs/apk'
    def aarPath = project.rootDir.path + "/" + "libmobiletagging/build/outputs/aar"
    def javadocPath = project.rootDir.path + "/" + "libmobiletagging/build/docs"

    mkdir(path)
    def documentationPath = path + "/Documentation"
    def frameworkPath = path + "/Framework"
    def samplePath = path + "/Sample"

    mkdir(documentationPath)
    mkdir(frameworkPath)
    mkdir(samplePath)

    copyAPKToReleaseFolder(apkPath,samplePath)

    copyJavaDocToReleaseFolder(javadocPath,documentationPath)

    copy {
        from(aarPath) {
            include "*-${version}.aar"
        }
        into frameworkPath
    }
    /*
    println  "Root project:   "+ project.rootProject;
    println  "  rootDir:      "+ project.rootDir;
    println  "  projectDir:   "+ project.projectDir;
    println  "  project dir:  "+ System.getProperty("user.dir");

    System.setProperty( "user.dir", project.projectDir.toString())
    println  "  project dir:  "+ System.getProperty("user.dir");*/


}

def copyAPKToReleaseFolder(apkPath,samplePath){
    copy {
        from(apkPath) {
            include "*-${version}.apk"
        }
        into samplePath
    }

}

def copyJavaDocToReleaseFolder(javaDocPath,documentationPath){

    println "javaDocPath : ?????  " + javaDocPath
    println "documentationPath : ?????  " + documentationPath
    copy {
        from(javaDocPath) {
            from "docs"
        }
        into documentationPath
    }

}


afterEvaluate {

    copyAARToReleaseFolder.dependsOn assembleRelease
    copyAARToReleaseFolder.dependsOn assembleDebug

    assembleRelease.doLast {
        copyAARToReleaseFolder.execute()
    }

    assembleDebug.doLast {
        copyAARToReleaseFolder.execute()
    }
}

